{"code":"Renew","falseAlarm":false,"level":0,"message":"Your license will expire in 8 days. Click 'Renew' to learn more or contact us via the Feedback form on our website.","positions":[{"file":" ","lines":[1]}]}
{"code":"V2507","currLine":" else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"  m_allocatorMode = HEAP_BLOCKS;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[36]}],"prevLine":" }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":" if (m_allocatorMode == HEAP_POOL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"  delete [] m_pPool;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[47]}],"prevLine":" // destroy each individual block","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"  while(m_pHead)","falseAlarm":false,"level":1,"message":"The body of the 'while' statement should be enclosed in braces.","nextLine":"   delete [] (CHAR*)Pop();","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[51]}],"prevLine":" {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"                if (handler)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                    (*handler)();","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[83]}],"prevLine":"                // If a new handler is defined, call it","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"                    assert(0);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[85]}],"prevLine":"                    (*handler)();","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2516","currLine":" else if (m_allocatorMode == HEAP_BLOCKS)","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":" {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[49]}],"prevLine":"  delete [] m_pPool;","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2533","currLine":"   m_pPool = (CHAR*)new CHAR[m_blockSize * m_maxObjects];","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"   m_allocatorMode = HEAP_POOL;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[32]}],"prevLine":"  {","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"   delete [] (CHAR*)Pop();","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[52]}],"prevLine":"  while(m_pHead)","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"                pBlock = (void*)(m_pPool + (m_poolIndex++ * m_blockSize));","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[74]}],"prevLine":"            {","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"            pBlock = (void*)new CHAR[m_blockSize];","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[92]}],"prevLine":"         m_blockCnt++;","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"    Block* pBlock = (Block*)pMemory;","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"    pBlock->pNext = m_pHead;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[117]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-4"}
{"code":"V2533","currLine":"    return (void*)pBlock;","falseAlarm":false,"level":1,"message":"C-style and functional notation casts should not be performed.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[135]}],"sastId":"MISRA-CPP-5-2-4"}
{"code":"V2547","currLine":"                std::set_new_handler(handler);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_new_handler' should be used.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[80]}],"prevLine":"                std::new_handler handler = std::set_new_handler(0);","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2563","currLine":"                pBlock = (void*)(m_pPool + (m_poolIndex++ * m_blockSize));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[74]}],"prevLine":"            {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2571","currLine":"   delete [] (CHAR*)Pop();","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: '(CHAR *) Pop()'.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[52]}],"prevLine":"  while(m_pHead)","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"    return pBlock;","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: 'return pBlock ;'.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[99]}],"prevLine":" ","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"    Block* pBlock = (Block*)pMemory;","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: '(Block *) pMemory'.","nextLine":"    pBlock->pNext = m_pHead;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[117]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-8"}
{"code":"V2571","currLine":"    return (void*)pBlock;","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: 'return (void *) pBlock ;'.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[135]}],"sastId":"MISRA-CPP-5-2-8"}
{"code":"V2578","currLine":"    assert(size <= m_objectSize);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[61]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"    assert(size <= m_objectSize);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[61]}],"prevLine":"{","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    assert(0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[86]}],"prevLine":"                else","sastId":"MISRA-CPP-5-2-12"}
{"code":"V2578","currLine":"                    assert(0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[86]}],"prevLine":"                else","sastId":"MISRA-CPP-5-2-12"}
{"code":"V3504","currLine":" else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"  m_allocatorMode = HEAP_BLOCKS;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[36]}],"prevLine":" }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":" if (m_allocatorMode == HEAP_POOL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"  delete [] m_pPool;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[47]}],"prevLine":" // destroy each individual block","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"  while(m_pHead)","falseAlarm":false,"level":1,"message":"The body of the 'while' statement should be enclosed in braces.","nextLine":"   delete [] (CHAR*)Pop();","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[51]}],"prevLine":" {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                if (handler)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                    (*handler)();","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[83]}],"prevLine":"                // If a new handler is defined, call it","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"                    assert(0);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[85]}],"prevLine":"                    (*handler)();","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3511","currLine":" else if (m_allocatorMode == HEAP_BLOCKS)","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":" {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[49]}],"prevLine":"  delete [] m_pPool;","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3527","currLine":"                std::set_new_handler(handler);","falseAlarm":false,"level":1,"message":"The return value of non-void function 'set_new_handler' should be used.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[80]}],"prevLine":"                std::new_handler handler = std::set_new_handler(0);","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3539","currLine":"                pBlock = (void*)(m_pPool + (m_poolIndex++ * m_blockSize));","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[74]}],"prevLine":"            {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3546","currLine":"   delete [] (CHAR*)Pop();","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: '(CHAR *) Pop()'.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[52]}],"prevLine":"  while(m_pHead)","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"    return pBlock;","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: 'return pBlock ;'.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[99]}],"prevLine":" ","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"    Block* pBlock = (Block*)pMemory;","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: '(Block *) pMemory'.","nextLine":"    pBlock->pNext = m_pHead;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[117]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3546","currLine":"    return (void*)pBlock;","falseAlarm":false,"level":1,"message":"Pointer to void should not be converted to a pointer to object. Consider inspecting the expression: 'return (void *) pBlock ;'.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[135]}],"sastId":"AUTOSAR-M5-2-8, AUTOSAR-M5-2-9"}
{"code":"V3551","currLine":"    assert(size <= m_objectSize);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[61]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"    assert(size <= m_objectSize);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[61]}],"prevLine":"{","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    assert(0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the first function argument.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[86]}],"prevLine":"                else","sastId":"AUTOSAR-M5-2-12"}
{"code":"V3551","currLine":"                    assert(0);","falseAlarm":false,"level":1,"message":"The string literal should not decay to a pointer to char. Consider inspecting the second function argument.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[86]}],"prevLine":"                else","sastId":"AUTOSAR-M5-2-12"}
{"code":"V104","currLine":"   m_pPool = (CHAR*)new CHAR[m_blockSize * m_maxObjects];","falseAlarm":false,"level":2,"message":"Implicit conversion of 'm_maxObjects' to memsize type in an arithmetic expression: m_blockSize * m_maxObjects","nextLine":"   m_allocatorMode = HEAP_POOL;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[32]}],"prevLine":"  {"}
{"code":"V104","currLine":"                pBlock = (void*)(m_pPool + (m_poolIndex++ * m_blockSize));","falseAlarm":false,"level":2,"message":"Implicit conversion of 'm_poolIndex ++' to memsize type in an arithmetic expression: m_poolIndex ++ * m_blockSize","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[74]}],"prevLine":"            {"}
{"code":"V2005","currLine":"   m_pPool = (CHAR*)new CHAR[m_blockSize * m_maxObjects];","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"   m_allocatorMode = HEAP_POOL;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[32]}],"prevLine":"  {"}
{"code":"V2005","currLine":"   delete [] (CHAR*)Pop();","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[52]}],"prevLine":"  while(m_pHead)"}
{"code":"V2005","currLine":"                pBlock = (void*)(m_pPool + (m_poolIndex++ * m_blockSize));","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"            }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[74]}],"prevLine":"            {"}
{"code":"V2005","currLine":"            pBlock = (void*)new CHAR[m_blockSize];","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[92]}],"prevLine":"         m_blockCnt++;"}
{"code":"V2005","currLine":"    Block* pBlock = (Block*)pMemory;","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"    pBlock->pNext = m_pHead;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[117]}],"prevLine":"{"}
{"code":"V2005","currLine":"    return (void*)pBlock;","falseAlarm":false,"level":2,"message":"C-style explicit type casting is utilized. Consider using: static_cast/const_cast/reinterpret_cast.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[135]}]}
{"code":"V2511","currLine":"   m_pPool = (CHAR*)new CHAR[m_blockSize * m_maxObjects];","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"   m_allocatorMode = HEAP_POOL;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[32]}],"prevLine":"  {","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"  delete [] m_pPool;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":" else if (m_allocatorMode == HEAP_BLOCKS)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[48]}],"prevLine":" if (m_allocatorMode == HEAP_POOL)","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"   delete [] (CHAR*)Pop();","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[52]}],"prevLine":"  while(m_pHead)","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            pBlock = (void*)new CHAR[m_blockSize];","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[92]}],"prevLine":"         m_blockCnt++;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V126","currLine":"    m_blockSize(size < sizeof(long*) ? sizeof(long*):size),","falseAlarm":false,"level":3,"message":"Be advised that the size of the type 'long' varies between LLP64/LP64 data models.","nextLine":"    m_objectSize(size),","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","lines":[10]}],"prevLine":"Allocator::Allocator(size_t size, UINT objects, CHAR* memory, const CHAR* name) :"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V730","currLine":" AllocatorPool() : Allocator(sizeof(T), Objects, m_memory)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: m_memory.","nextLine":" {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[93]}],"prevLine":"public:","sastId":"CERT-EXP53-CPP"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2504","currLine":" CHAR m_memory[sizeof(T) * Objects];","falseAlarm":false,"level":1,"message":"Size of the 'm_memory' array should be explicitly specified.","nextLine":"};","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[97]}],"prevLine":"private:","sastId":"MISRA-CPP-3-1-3"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2573","currLine":"#define __ALLOCATOR_H","falseAlarm":false,"level":1,"message":"Identifiers that contain '__' or start with '_[A-Z]' are reserved. Consider inspecting the '__ALLOCATOR_H' identifier.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[2]}],"prevLine":"#ifndef __ALLOCATOR_H","sastId":"MISRA-CPP-17-0-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2575","currLine":"class Allocator","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[9]}],"prevLine":"/// David Lafreniere","sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2575","currLine":"class AllocatorPool : public Allocator","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[90]}],"prevLine":"template <class T, UINT Objects>","sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3502","currLine":" CHAR m_memory[sizeof(T) * Objects];","falseAlarm":false,"level":1,"message":"Size of the 'm_memory' array should be explicitly specified.","nextLine":"};","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[97]}],"prevLine":"private:","sastId":"AUTOSAR-A3-1-4"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3547","currLine":"#define __ALLOCATOR_H","falseAlarm":false,"level":1,"message":"Identifiers that contain '__' or start with '_[A-Z]' are reserved. Consider inspecting the '__ALLOCATOR_H' identifier.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[2]}],"prevLine":"#ifndef __ALLOCATOR_H","sastId":"AUTOSAR-A17-0-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3549","currLine":"class Allocator","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[9]}],"prevLine":"/// David Lafreniere","sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3549","currLine":"class AllocatorPool : public Allocator","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[90]}],"prevLine":"template <class T, UINT Objects>","sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V104","currLine":" CHAR m_memory[sizeof(T) * Objects];","falseAlarm":false,"level":2,"message":"Implicit conversion of 'Objects' to memsize type in an arithmetic expression: sizeof (T) * Objects","nextLine":"};","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[97]}],"prevLine":"private:"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"        Block* pNext;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    };","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[69]}],"prevLine":"    {"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    const size_t m_blockSize;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    const size_t m_objectSize;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[74]}]}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    const size_t m_objectSize;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    const UINT m_maxObjects;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[75]}],"prevLine":"    const size_t m_blockSize;"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    Block* m_pHead;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    CHAR* m_pPool;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[78]}],"prevLine":" AllocatorMode m_allocatorMode;"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    CHAR* m_pPool;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    UINT m_poolIndex;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[79]}],"prevLine":"    Block* m_pHead;"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    const CHAR* m_name;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"};","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.h","lines":[85]}],"prevLine":"    UINT m_deallocations;"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2573","currLine":"#define _DATA_TYPES_H","falseAlarm":false,"level":1,"message":"Identifiers that contain '__' or start with '_[A-Z]' are reserved. Consider inspecting the '_DATA_TYPES_H' identifier.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\DataTypes.h","lines":[2]}],"prevLine":"#ifndef _DATA_TYPES_H","sastId":"MISRA-CPP-17-0-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\Allocator.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3547","currLine":"#define _DATA_TYPES_H","falseAlarm":false,"level":1,"message":"Identifiers that contain '__' or start with '_[A-Z]' are reserved. Consider inspecting the '_DATA_TYPES_H' identifier.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\Allocator\\DataTypes.h","lines":[2]}],"prevLine":"#ifndef _DATA_TYPES_H","sastId":"AUTOSAR-A17-0-1"}
{"code":"V591","currLine":"}","cwe":393,"falseAlarm":false,"level":1,"message":"Non-void function should return a value.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[480]}],"prevLine":"        throw 1;","sastId":"CERT-MSC52-CPP"}
{"code":"V1064","currLine":"        if (k % 8)","falseAlarm":false,"level":1,"message":"The 'k' operand of the modulo operation is less than the '8' operand. The result is always equal to the left operand.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[317]}],"prevLine":"        // "}
{"code":"V2506","currLine":"bool BBV::operator==(BBV & V)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[229,235,236,238]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"BBV::operator char*()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[362,390,392]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"int BBV::getWeight()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[395,409,411]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2507","currLine":"    if(vec != NULL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"    delete[]vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[11]}],"prevLine":"{","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"            for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"                vec[i] = 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[31]}],"prevLine":"            size = (size_v - 1) / 8 + 1;","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[34]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[37]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[57]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[72]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[75]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"            for (int i = 0; i < size; i++)","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"                vec[i] = V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[88]}],"prevLine":"        {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[91]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (vec != NULL)//  ,    ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[102]}],"prevLine":"        size = (len - 1) / 8 + 1;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[114]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[129]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[132]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (k >= 7)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k %= 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[143]}],"prevLine":"        int j = k / 8;//  ","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[148]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (k >= 7)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k %= 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[159]}],"prevLine":"        int j = k / 8;//  ","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[164]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (vec != NULL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[174]}],"prevLine":"        size = V.size;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"            for (int i = 0; i < size; i++)","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"                vec[i] = V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[179]}],"prevLine":"        {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[182]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (vec != NULL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[194]}],"prevLine":"        size = (len - 1) / 8 + 1;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[206]}],"prevLine":"                {","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[221]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[224]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//  ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            if (V.vec[i] != vec[i])","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[233]}],"prevLine":"    {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"            if (V.vec[i] != vec[i])","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                return false;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[234]}],"prevLine":"        for (int i = 0; i < size; i++)//  ","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = vec[i] | V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[246]}],"prevLine":"        BBV res(*this);//   (   )","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 2;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[250]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = vec[i] & V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[259]}],"prevLine":"        BBV res(*this);//   (   )","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 2;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[263]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = vec[i] ^ V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[272]}],"prevLine":"        BBV res(*this);//   (   )","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 2;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[276]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//   ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = ~vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[285]}],"prevLine":"    {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"        if (k != 0)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k = 8 - k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[288]}],"prevLine":"        int k = len % 8;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] ^= res.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[301]}],"prevLine":"    {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"        if (k % 8 == 0)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            start = k / 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[304]}],"prevLine":"        int start = (k - 1) / 8;//       res","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] ^= res.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[332]}],"prevLine":"    {","sastId":"MISRA-CPP-6-3-1"}
{"code":"V2507","currLine":"        if (k % 8 == 0)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            start = size - 1 - k / 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[335]}],"prevLine":"        int start = size - 1 - (k - 1) / 8;//       res","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[358]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"                    str[i] = '0';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[382]}],"prevLine":"                }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[388]}],"prevLine":"        }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[433]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (k == 0)//   ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            *ptr &= ~mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[443]}],"prevLine":"        mask <<= index;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            *ptr |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[445]}],"prevLine":"            *ptr &= ~mask;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[448]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (*ptr & mask)//   0  ,   k   1","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[459]}],"prevLine":"        mask <<= index;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[463]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        if (mask & *(v.ptr))//      ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            *this = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[473]}],"prevLine":"        mask <<= v.index;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            *this = 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[475]}],"prevLine":"            *this = 1;","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[478]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                if (V.vec[k] & mask)//        ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                    cout << '1';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[492]}],"prevLine":"            {","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"                else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"                    cout << '0';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[494]}],"prevLine":"                    cout << '1';","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2507","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[531]}],"prevLine":"    }","sastId":"MISRA-CPP-6-4-1"}
{"code":"V2513","currLine":"        len = strlen(str);//      - ","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[45]}],"prevLine":"    {","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2513","currLine":"        len = strlen(str);//   ","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[100]}],"prevLine":"    {","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2513","currLine":"        len = strlen(str);//       ","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[192]}],"prevLine":"    {","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2542","currLine":"}","falseAlarm":false,"level":1,"message":"Function with a non-void return type should return a value from all exit paths.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[480]}],"prevLine":"        throw 1;","sastId":"MISRA-CPP-8-4-3"}
{"code":"V2563","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[57]}],"prevLine":"                {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[89]}],"prevLine":"            for (int i = 0; i < size; i++)","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[114]}],"prevLine":"                {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        vec[j] &= ~mask;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[146]}],"prevLine":"        mask <<= k;//     ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        vec[j] |= mask;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[162]}],"prevLine":"        mask <<= k;//     ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[180]}],"prevLine":"            for (int i = 0; i < size; i++)","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[206]}],"prevLine":"                {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            if (V.vec[i] != vec[i])","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                return false;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[234]}],"prevLine":"        for (int i = 0; i < size; i++)//  ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[i] = vec[i] | V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[247]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[i] = vec[i] & V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[260]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[i] = vec[i] ^ V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[273]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[i] = ~vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        int k = len % 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[286]}],"prevLine":"        for (int i = 0; i < size; i++)//   ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        res.vec[size - 1] <<= k;//    ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        res.vec[size - 1] >>= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[290]}],"prevLine":"            k = 8 - k;","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        res.vec[size - 1] >>= k;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[291]}],"prevLine":"        res.vec[size - 1] <<= k;//    ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[i] ^= res.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        int start = (k - 1) / 8;//       res","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[302]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[start + i] = vec[i] << k;//  ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[310]}],"prevLine":"        {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            mask = -1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[311]}],"prevLine":"            res.vec[start + i] = vec[i] << k;//  ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            mask = vec[i] & mask;//   ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[314]}],"prevLine":"            mask <<= 8 - k;","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[size - 1] <<= k;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            res.vec[size - 1] >>= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[320]}],"prevLine":"            int k = (8 - len % 8);","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[size - 1] >>= k;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[321]}],"prevLine":"            res.vec[size - 1] <<= k;","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[i] ^= res.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        int start = size - 1 - (k - 1) / 8;//       res","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[333]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[start - i] = vec[size - 1 - i] >> k;//  ,     ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            res.vec[start - i] |= mask << (8 - k);//  ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[341]}],"prevLine":"        {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            res.vec[start - i] |= mask << (8 - k);//  ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            mask = -1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[342]}],"prevLine":"            res.vec[start - i] = vec[size - 1 - i] >> k;//  ,     ","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            mask = vec[size - 1 - i] & mask;//   ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[345]}],"prevLine":"            mask >>= 8 - k;","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"        X ptr(&(vec[k / 8]), k % 8);//   X,        ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return ptr;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[355]}],"prevLine":"    {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                if ((vec[k])&(mask))","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[378]}],"prevLine":"                }","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"            byte v = vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            while (v != 0)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[402]}],"prevLine":"        {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                if (V.vec[k] & mask)//        ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                    cout << '1';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[492]}],"prevLine":"            {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2575","currLine":"ostream & operator << (ostream &r, BBV& V)","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[482]}],"sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"istream & operator >> (istream &r, BBV& V)// return r;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[511]}],"prevLine":"}","sastId":"MISRA-CPP-7-3-1"}
{"code":"V3504","currLine":"    if(vec != NULL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"    delete[]vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[11]}],"prevLine":"{","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"            for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"                vec[i] = 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[31]}],"prevLine":"            size = (size_v - 1) / 8 + 1;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[34]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[37]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[57]}],"prevLine":"                {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[72]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[75]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"            for (int i = 0; i < size; i++)","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"                vec[i] = V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[88]}],"prevLine":"        {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[91]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (vec != NULL)//  ,    ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[102]}],"prevLine":"        size = (len - 1) / 8 + 1;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[114]}],"prevLine":"                {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[129]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[132]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (k >= 7)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k %= 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[143]}],"prevLine":"        int j = k / 8;//  ","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[148]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (k >= 7)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k %= 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[159]}],"prevLine":"        int j = k / 8;//  ","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[164]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (vec != NULL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[174]}],"prevLine":"        size = V.size;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"            for (int i = 0; i < size; i++)","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"                vec[i] = V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[179]}],"prevLine":"        {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[182]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (vec != NULL)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[194]}],"prevLine":"        size = (len - 1) / 8 + 1;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[206]}],"prevLine":"                {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[221]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[224]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//  ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            if (V.vec[i] != vec[i])","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[233]}],"prevLine":"    {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"            if (V.vec[i] != vec[i])","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                return false;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[234]}],"prevLine":"        for (int i = 0; i < size; i++)//  ","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = vec[i] | V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[246]}],"prevLine":"        BBV res(*this);//   (   )","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 2;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[250]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = vec[i] & V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[259]}],"prevLine":"        BBV res(*this);//   (   )","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 2;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[263]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = vec[i] ^ V.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[272]}],"prevLine":"        BBV res(*this);//   (   )","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 2;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[276]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//   ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] = ~vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[285]}],"prevLine":"    {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (k != 0)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k = 8 - k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[288]}],"prevLine":"        int k = len % 8;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] ^= res.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[301]}],"prevLine":"    {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (k % 8 == 0)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            start = k / 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[304]}],"prevLine":"        int start = (k - 1) / 8;//       res","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        for (int i = 0; i < size; i++)//    ","falseAlarm":false,"level":1,"message":"The body of the 'for' statement should be enclosed in braces.","nextLine":"            res.vec[i] ^= res.vec[i];","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[332]}],"prevLine":"    {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (k % 8 == 0)","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            start = size - 1 - k / 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[335]}],"prevLine":"        int start = size - 1 - (k - 1) / 8;//       res","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[358]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"                    str[i] = '0';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[382]}],"prevLine":"                }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[388]}],"prevLine":"        }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[433]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (k == 0)//   ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            *ptr &= ~mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[443]}],"prevLine":"        mask <<= index;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            *ptr |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[445]}],"prevLine":"            *ptr &= ~mask;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[448]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (*ptr & mask)//   0  ,   k   1","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            k = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[459]}],"prevLine":"        mask <<= index;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[463]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        if (mask & *(v.ptr))//      ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"            *this = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[473]}],"prevLine":"        mask <<= v.index;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"        else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"            *this = 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[475]}],"prevLine":"            *this = 1;","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[478]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                if (V.vec[k] & mask)//        ","falseAlarm":false,"level":1,"message":"The body of the 'if' statement should be enclosed in braces.","nextLine":"                    cout << '1';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[492]}],"prevLine":"            {","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"                else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"                    cout << '0';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[494]}],"prevLine":"                    cout << '1';","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3504","currLine":"    else","falseAlarm":false,"level":1,"message":"The body of the 'else' branch should be enclosed in braces.","nextLine":"        throw 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[531]}],"prevLine":"    }","sastId":"AUTOSAR-M6-3-1, AUTOSAR-M6-4-1"}
{"code":"V3508","currLine":"        len = strlen(str);//      - ","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[45]}],"prevLine":"    {","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3508","currLine":"        len = strlen(str);//   ","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[100]}],"prevLine":"    {","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3508","currLine":"        len = strlen(str);//       ","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[192]}],"prevLine":"    {","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3525","currLine":"}","falseAlarm":false,"level":1,"message":"Function with a non-void return type should return a value from all exit paths.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[480]}],"prevLine":"        throw 1;","sastId":"AUTOSAR-A8-4-2"}
{"code":"V3539","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[57]}],"prevLine":"                {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[89]}],"prevLine":"            for (int i = 0; i < size; i++)","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[114]}],"prevLine":"                {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        vec[j] &= ~mask;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[146]}],"prevLine":"        mask <<= k;//     ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        vec[j] |= mask;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[162]}],"prevLine":"        mask <<= k;//     ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[180]}],"prevLine":"            for (int i = 0; i < size; i++)","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[206]}],"prevLine":"                {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            if (V.vec[i] != vec[i])","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                return false;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[234]}],"prevLine":"        for (int i = 0; i < size; i++)//  ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[i] = vec[i] | V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[247]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[i] = vec[i] & V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[260]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[i] = vec[i] ^ V.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[273]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[i] = ~vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        int k = len % 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[286]}],"prevLine":"        for (int i = 0; i < size; i++)//   ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        res.vec[size - 1] <<= k;//    ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        res.vec[size - 1] >>= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[290]}],"prevLine":"            k = 8 - k;","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        res.vec[size - 1] >>= k;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[291]}],"prevLine":"        res.vec[size - 1] <<= k;//    ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[i] ^= res.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        int start = (k - 1) / 8;//       res","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[302]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[start + i] = vec[i] << k;//  ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[310]}],"prevLine":"        {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            mask = -1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[311]}],"prevLine":"            res.vec[start + i] = vec[i] << k;//  ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            mask = vec[i] & mask;//   ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[314]}],"prevLine":"            mask <<= 8 - k;","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[size - 1] <<= k;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            res.vec[size - 1] >>= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[320]}],"prevLine":"            int k = (8 - len % 8);","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[size - 1] >>= k;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[321]}],"prevLine":"            res.vec[size - 1] <<= k;","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[i] ^= res.vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        int start = size - 1 - (k - 1) / 8;//       res","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[333]}],"prevLine":"        for (int i = 0; i < size; i++)//    ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[start - i] = vec[size - 1 - i] >> k;//  ,     ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            res.vec[start - i] |= mask << (8 - k);//  ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[341]}],"prevLine":"        {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            res.vec[start - i] |= mask << (8 - k);//  ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            mask = -1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[342]}],"prevLine":"            res.vec[start - i] = vec[size - 1 - i] >> k;//  ,     ","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            mask = vec[size - 1 - i] & mask;//   ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[345]}],"prevLine":"            mask >>= 8 - k;","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"        X ptr(&(vec[k / 8]), k % 8);//   X,        ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"        return ptr;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[355]}],"prevLine":"    {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                if ((vec[k])&(mask))","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[378]}],"prevLine":"                }","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"            byte v = vec[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"            while (v != 0)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[402]}],"prevLine":"        {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                if (V.vec[k] & mask)//        ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                    cout << '1';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[492]}],"prevLine":"            {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3549","currLine":"ostream & operator << (ostream &r, BBV& V)","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[482]}],"sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"istream & operator >> (istream &r, BBV& V)// return r;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[511]}],"prevLine":"}","sastId":"AUTOSAR-M7-3-1"}
{"code":"V103","currLine":"        len = strlen(str);//      - ","falseAlarm":false,"level":2,"message":"Implicit type conversion from memsize to 32-bit type.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[45]}],"prevLine":"    {"}
{"code":"V103","currLine":"        len = strlen(str);//   ","falseAlarm":false,"level":2,"message":"Implicit type conversion from memsize to 32-bit type.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[100]}],"prevLine":"    {"}
{"code":"V103","currLine":"        len = strlen(str);//       ","falseAlarm":false,"level":2,"message":"Implicit type conversion from memsize to 32-bit type.","nextLine":"        size = (len - 1) / 8 + 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[192]}],"prevLine":"    {"}
{"code":"V108","currLine":"                vec[i] = 0;","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[32]}],"prevLine":"            for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[57]}],"prevLine":"                {"}
{"code":"V108","currLine":"                        vec[k] |= mask;","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    mask <<= 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[58]}],"prevLine":"                    if (str[i] != '0')"}
{"code":"V108","currLine":"                    vec[k] ^= vec[k];//  ","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    mask = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[67]}],"prevLine":"                    k++;"}
{"code":"V108","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[89]}],"prevLine":"            for (int i = 0; i < size; i++)"}
{"code":"V108","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[89]}],"prevLine":"            for (int i = 0; i < size; i++)"}
{"code":"V108","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[114]}],"prevLine":"                {"}
{"code":"V108","currLine":"                        vec[k] |= mask;","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    mask <<= 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[115]}],"prevLine":"                    if (str[i] != '0')"}
{"code":"V108","currLine":"                    vec[k] ^= vec[k];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    mask = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[124]}],"prevLine":"                    k++;"}
{"code":"V108","currLine":"        vec[j] &= ~mask;","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[146]}],"prevLine":"        mask <<= k;//     "}
{"code":"V108","currLine":"        vec[j] |= mask;","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[162]}],"prevLine":"        mask <<= k;//     "}
{"code":"V108","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[180]}],"prevLine":"            for (int i = 0; i < size; i++)"}
{"code":"V108","currLine":"                vec[i] = V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[180]}],"prevLine":"            for (int i = 0; i < size; i++)"}
{"code":"V108","currLine":"                    if (str[i] != '0')","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":"                        vec[k] |= mask;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[206]}],"prevLine":"                {"}
{"code":"V108","currLine":"                        vec[k] |= mask;","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    mask <<= 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[207]}],"prevLine":"                    if (str[i] != '0')"}
{"code":"V108","currLine":"                    vec[k] ^= vec[k];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    mask = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[216]}],"prevLine":"                    k++;"}
{"code":"V108","currLine":"            if (V.vec[i] != vec[i])","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"                return false;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[234]}],"prevLine":"        for (int i = 0; i < size; i++)//  "}
{"code":"V108","currLine":"            if (V.vec[i] != vec[i])","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                return false;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[234]}],"prevLine":"        for (int i = 0; i < size; i++)//  "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] | V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[247]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] | V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[247]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] | V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[247]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] & V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[260]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] & V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[260]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] & V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[260]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] ^ V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[273]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] ^ V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[273]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = vec[i] ^ V.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return res;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[273]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[i] = ~vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        int k = len % 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[286]}],"prevLine":"        for (int i = 0; i < size; i++)//   "}
{"code":"V108","currLine":"            res.vec[i] = ~vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        int k = len % 8;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[286]}],"prevLine":"        for (int i = 0; i < size; i++)//   "}
{"code":"V108","currLine":"        res.vec[size - 1] <<= k;//    ","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        res.vec[size - 1] >>= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[290]}],"prevLine":"            k = 8 - k;"}
{"code":"V108","currLine":"        res.vec[size - 1] >>= k;","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[291]}],"prevLine":"        res.vec[size - 1] <<= k;//    "}
{"code":"V108","currLine":"            res.vec[i] ^= res.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        int start = (k - 1) / 8;//       res","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[302]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[start + i] = vec[i] << k;//  ","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[310]}],"prevLine":"        {"}
{"code":"V108","currLine":"            res.vec[start + i] = vec[i] << k;//  ","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[310]}],"prevLine":"        {"}
{"code":"V108","currLine":"            res.vec[start + i] |= mask >> (8 - k);//  ,     ","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"            mask = -1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[311]}],"prevLine":"            res.vec[start + i] = vec[i] << k;//  "}
{"code":"V108","currLine":"            mask = vec[i] & mask;//   ","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[314]}],"prevLine":"            mask <<= 8 - k;"}
{"code":"V108","currLine":"            res.vec[size - 1] <<= k;","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"            res.vec[size - 1] >>= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[320]}],"prevLine":"            int k = (8 - len % 8);"}
{"code":"V108","currLine":"            res.vec[size - 1] >>= k;","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[321]}],"prevLine":"            res.vec[size - 1] <<= k;"}
{"code":"V108","currLine":"            res.vec[i] ^= res.vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: res.vec[not a memsize-type]. Use memsize type instead.","nextLine":"        int start = size - 1 - (k - 1) / 8;//       res","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[333]}],"prevLine":"        for (int i = 0; i < size; i++)//    "}
{"code":"V108","currLine":"            res.vec[start - i] = vec[size - 1 - i] >> k;//  ,     ","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"            res.vec[start - i] |= mask << (8 - k);//  ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[341]}],"prevLine":"        {"}
{"code":"V108","currLine":"            mask = vec[size - 1 - i] & mask;//   ","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[345]}],"prevLine":"            mask >>= 8 - k;"}
{"code":"V108","currLine":"        X ptr(&(vec[k / 8]), k % 8);//   X,        ","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"        return ptr;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[355]}],"prevLine":"    {"}
{"code":"V108","currLine":"                if ((vec[k])&(mask))","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"                {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[378]}],"prevLine":"                }"}
{"code":"V108","currLine":"                    str[i] = '1';","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":"                }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[380]}],"prevLine":"                {"}
{"code":"V108","currLine":"                    str[i] = '0';","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":"                mask <<= 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[383]}],"prevLine":"                else"}
{"code":"V108","currLine":"            str[len] = '\\0';","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[386]}],"prevLine":"            }"}
{"code":"V108","currLine":"            byte v = vec[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: vec[not a memsize-type]. Use memsize type instead.","nextLine":"            while (v != 0)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[402]}],"prevLine":"        {"}
{"code":"V108","currLine":"                if (V.vec[k] & mask)//        ","falseAlarm":false,"level":2,"message":"Incorrect index type: V.vec[not a memsize-type]. Use memsize type instead.","nextLine":"                    cout << '1';","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[492]}],"prevLine":"            {"}
{"code":"V121","currLine":"        vec = new byte[(size_v - 1) / 8 + 1];//    ","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (vec != NULL)//  ,     , - ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[26]}],"prevLine":"    {"}
{"code":"V121","currLine":"        vec = new byte[size];","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[47]}],"prevLine":"        size = (len - 1) / 8 + 1;"}
{"code":"V121","currLine":"        vec = new byte[size];//            ","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[85]}],"prevLine":"        len = V.len;"}
{"code":"V121","currLine":"        vec = new byte[size];//           ","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[104]}],"prevLine":"            delete vec;"}
{"code":"V121","currLine":"        vec = new byte[size];//         ","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[176]}],"prevLine":"            delete vec;"}
{"code":"V121","currLine":"        vec = new byte[size];//          . . ","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[196]}],"prevLine":"            delete vec;"}
{"code":"V121","currLine":"        char* str = new char[len + 1];//   ","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        if (str != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[366]}],"prevLine":"    {"}
{"code":"V121","currLine":"    char* str = new char[str_size + 1];//       \\0","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"    if (str != NULL)//  ,        ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[521]}],"prevLine":"    }"}
{"code":"V668","currLine":"        if (vec != NULL)//  ,     , - ","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'vec' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[27]}],"prevLine":"        vec = new byte[(size_v - 1) / 8 + 1];//    ","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"        if (vec != NULL)","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'vec' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[48]}],"prevLine":"        vec = new byte[size];","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"        if (vec != NULL)","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'vec' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[86]}],"prevLine":"        vec = new byte[size];//            ","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"        if (vec != NULL)","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'vec' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[105]}],"prevLine":"        vec = new byte[size];//           ","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"        if (vec != NULL)","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'vec' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[177]}],"prevLine":"        vec = new byte[size];//         ","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"        if (vec != NULL)","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'vec' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[197]}],"prevLine":"        vec = new byte[size];//          . . ","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"        if (str != NULL)","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'str' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"        {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[367]}],"prevLine":"        char* str = new char[len + 1];//   ","sastId":"CERT-MEM52-CPP"}
{"code":"V668","currLine":"    if (str != NULL)//  ,        ","cwe":571,"falseAlarm":false,"level":2,"message":"There is no sense in testing the 'str' pointer against null, as the memory was allocated using the 'new' operator. The exception will be generated in the case of memory allocation error.","nextLine":"    {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[522]}],"prevLine":"    char* str = new char[str_size + 1];//       \\0","sastId":"CERT-MEM52-CPP"}
{"code":"V755","currLine":"        cin >> str;","cwe":123,"falseAlarm":false,"level":2,"message":"Copying potentially tainted data from 'std::cin' to buffer 'str'. Buffer overflow is possible.","nextLine":"        V.Init(str);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[525]}],"prevLine":"        cout << \"Input BBV:\\n\";","sastId":"CERT-STR31-C"}
{"code":"V1077","currLine":"BBV::BBV(int size_v)","cwe":457,"falseAlarm":false,"level":2,"message":"Conditional initialization inside the 'BBV' constructor may leave some members uninitialized. Inspect the following: vec, len, size.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[22,26,29,30]}]}
{"code":"V1077","currLine":"BBV::BBV(const char * str)","cwe":457,"falseAlarm":false,"level":2,"message":"Conditional initialization inside the 'BBV' constructor may leave some members uninitialized. Inspect the following: len, size, vec.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[41,45,46,47]}]}
{"code":"V1077","currLine":"BBV::BBV(BBV & V)","cwe":457,"falseAlarm":false,"level":2,"message":"Conditional initialization inside the 'BBV' constructor may leave some members uninitialized. Inspect the following: size, len, vec.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[79,83,84,85]}]}
{"code":"V1077","currLine":"X::X(byte* vec, int k)//           ","cwe":457,"falseAlarm":false,"level":2,"message":"Conditional initialization inside the 'X' constructor may leave some members uninitialized. Inspect the following: ptr, index.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[426,430,431]}]}
{"code":"V2015","currLine":"            int k = (8 - len % 8);","falseAlarm":false,"level":2,"message":"The 'k' identifier declared in the inner scope hides the identifier declared in the outer scope.","nextLine":"            res.vec[size - 1] <<= k;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[319,296]}],"prevLine":"        {","sastId":"CERT-DCL01-C"}
{"code":"V2511","currLine":"    delete[]vec;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[12]}],"prevLine":"    if(vec != NULL)","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        vec = new byte[(size_v - 1) / 8 + 1];//    ","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (vec != NULL)//  ,     , - ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[26]}],"prevLine":"    {","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        vec = new byte[size];","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[47]}],"prevLine":"        size = (len - 1) / 8 + 1;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        vec = new byte[size];//            ","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[85]}],"prevLine":"        len = V.len;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            delete vec;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"        vec = new byte[size];//           ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[103]}],"prevLine":"        if (vec != NULL)//  ,    ","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        vec = new byte[size];//           ","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[104]}],"prevLine":"            delete vec;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            delete vec;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"        vec = new byte[size];//         ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[175]}],"prevLine":"        if (vec != NULL)","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        vec = new byte[size];//         ","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[176]}],"prevLine":"            delete vec;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            delete vec;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"        vec = new byte[size];//          . . ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[195]}],"prevLine":"        if (vec != NULL)","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        vec = new byte[size];//          . . ","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (vec != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[196]}],"prevLine":"            delete vec;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        char* str = new char[len + 1];//   ","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        if (str != NULL)","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[366]}],"prevLine":"    {","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"    char* str = new char[str_size + 1];//       \\0","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"    if (str != NULL)//  ,        ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[521]}],"prevLine":"    }","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        delete[]str;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[529]}],"prevLine":"        V.size = (str_size - 1) / 8 + 1;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V809","currLine":"    if(vec != NULL)","falseAlarm":false,"level":3,"message":"Verifying that a pointer value is not NULL is not required. The 'if (vec != __null)' check can be removed.","nextLine":"    delete[]vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[11]}],"prevLine":"{"}
{"code":"V809","currLine":"        if (vec != NULL)//  ,    ","falseAlarm":false,"level":3,"message":"Verifying that a pointer value is not NULL is not required. The 'if (vec != __null)' check can be removed.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[102]}],"prevLine":"        size = (len - 1) / 8 + 1;"}
{"code":"V809","currLine":"        if (vec != NULL)","falseAlarm":false,"level":3,"message":"Verifying that a pointer value is not NULL is not required. The 'if (vec != __null)' check can be removed.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[174]}],"prevLine":"        size = V.size;"}
{"code":"V809","currLine":"        if (vec != NULL)","falseAlarm":false,"level":3,"message":"Verifying that a pointer value is not NULL is not required. The 'if (vec != __null)' check can be removed.","nextLine":"            delete vec;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[194]}],"prevLine":"        size = (len - 1) / 8 + 1;"}
{"code":"V2009","currLine":"bool BBV::operator==(BBV & V)","falseAlarm":false,"level":3,"message":"Consider passing the 'V' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[229]}]}
{"code":"V2009","currLine":"BBV BBV::operator|(BBV & V)","falseAlarm":false,"level":3,"message":"Consider passing the 'V' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[241]}]}
{"code":"V2009","currLine":"BBV BBV::operator&(BBV & V)","falseAlarm":false,"level":3,"message":"Consider passing the 'V' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[254]}]}
{"code":"V2009","currLine":"BBV BBV::operator^(BBV & V)","falseAlarm":false,"level":3,"message":"Consider passing the 'V' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[267]}]}
{"code":"V2009","currLine":"X X::operator=(X& v)","falseAlarm":false,"level":3,"message":"Consider passing the 'v' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[467]}]}
{"code":"V2009","currLine":"ostream & operator << (ostream &r, BBV& V)","falseAlarm":false,"level":3,"message":"Consider passing the 'V' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","lines":[482]}]}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":"using namespace std;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[5]}],"prevLine":"#include <iostream>","sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":"typedef unsigned char byte;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[7]}],"sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":"class X","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[9]}],"sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":"class BBV","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[22]}],"sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":"using namespace std;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[5]}],"prevLine":"#include <iostream>","sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":"typedef unsigned char byte;","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[7]}],"sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":"class X","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[9]}],"sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":"class BBV","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[22]}],"sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V302","currLine":"    X operator [] (int k);//  []","falseAlarm":false,"level":2,"message":"Member operator[] of 'BBV' class has a 32-bit type argument. Use memsize-type here.","nextLine":"    operator char*();//  ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[46]}],"prevLine":"    BBV operator << (int k);// "}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V690","currLine":"class X","falseAlarm":false,"level":2,"message":"The 'X' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[9]}]}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V122","currLine":"    byte* ptr;//  ,    ","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    int index;//   ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[11]}],"prevLine":"{"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V122","currLine":"    byte* vec;//   ","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    int size;// ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\BBV.h","lines":[25]}],"prevLine":"    friend X;"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2575","currLine":"class NodeBoolTree","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\NodeBoolTree.h","lines":[8]}],"sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3549","currLine":"class NodeBoolTree","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\NodeBoolTree.h","lines":[8]}],"sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V690","currLine":"class NodeBoolTree","falseAlarm":false,"level":2,"message":"The 'NodeBoolTree' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\NodeBoolTree.h","lines":[8]}]}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":" NodeBoolTree *lt = nullptr, *rt = nullptr;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\NodeBoolTree.h","lines":[17]}],"prevLine":"    "}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":" BoolEquation *eq;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"};","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\NodeBoolTree.h","lines":[19]}]}
{"code":"V2537","currLine":"int main(int argc, char *argv[])","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'argc'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[128]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2537","currLine":"int main(int argc, char *argv[])","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'argv'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[128]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2575","currLine":"Allocator stressTestAllocator(1024, 0, NULL, \"StressTestAllocator\");  //   1,   ","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[15]}],"prevLine":"//     ","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"struct TestBlock {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    int id;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[18]}],"prevLine":"//    ","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"void runAllocatorStressTest() {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    std::cout << \" - ...\\n\";","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[24]}],"prevLine":"//           ","sastId":"MISRA-CPP-7-3-1"}
{"code":"V3523","currLine":"int main(int argc, char *argv[])","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'argc'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[128]}],"sastId":"AUTOSAR-M0-1-11"}
{"code":"V3523","currLine":"int main(int argc, char *argv[])","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'argv'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[128]}],"sastId":"AUTOSAR-M0-1-11"}
{"code":"V3549","currLine":"Allocator stressTestAllocator(1024, 0, NULL, \"StressTestAllocator\");  //   1,   ","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[15]}],"prevLine":"//     ","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"struct TestBlock {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    int id;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[18]}],"prevLine":"//    ","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"void runAllocatorStressTest() {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    std::cout << \" - ...\\n\";","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\allocator_stress_test.cpp","lines":[24]}],"prevLine":"//           ","sastId":"AUTOSAR-M7-3-1"}
{"code":"V730","currLine":"BoolEquation::BoolEquation(BoolInterval **cnf, BoolInterval *root, int cnfSize, int count, BBV mask, std::shared_ptr<BranchingStrategy> strategy)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: forcedBranchColumn.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[11]}],"sastId":"CERT-EXP53-CPP"}
{"code":"V730","currLine":"BoolEquation::BoolEquation(BoolEquation &equation)","cwe":457,"falseAlarm":false,"level":1,"message":"Not all members of a class are initialized inside the constructor. Consider inspecting: forcedBranchColumn.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[26]}],"sastId":"CERT-EXP53-CPP"}
{"code":"V2506","currLine":"int BoolEquation::CheckRules()","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[48,60,65,69,92,123,127,131]}],"prevLine":"//  ","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolEquation::Rule2RowNull(BoolInterval *interval)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[135,149,152]}],"prevLine":"//  ","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolEquation::Rule1Row1(BoolInterval *interval)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[156,169,172]}],"prevLine":"//   ","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolEquation::Rule4Col0(BBV vector)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[188,194,198]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolEquation::Rule5Col1(BBV vector)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[201,207,211]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2516","currLine":" } else if (auto rowStrategy = dynamic_cast<strategiaRow*>(equation.branchingStrategy.get())) {","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"  this->branchingStrategy = std::make_shared<strategiaRow>(*rowStrategy);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[41]}],"prevLine":"  this->branchingStrategy = std::make_shared<strategiaColumn>(*colStrategy);","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2530","currLine":"    for (int k = 0; k < interval->length(); k++) {","falseAlarm":false,"level":1,"message":"The loop should be terminated with no more than one 'break' or 'goto' statement.","nextLine":"     if (mask[k] != 1) {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[74,82,86]}],"prevLine":"   if (Rule1Row1(interval)) {","sastId":"MISRA-CPP-6-6-4"}
{"code":"V2563","currLine":"        this->cnf[i] = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[16]}],"prevLine":"    for (int i = 0; i < cnfSize; i++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"  this->cnf[i] = equation.cnf[i]; ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[31]}],"prevLine":" for (int i = 0; i < equation.cnfSize; i++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"  BoolInterval *interval = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[54]}],"prevLine":" for (int i = 0; i < cnfSize; i++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"  BoolInterval *interval = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[217]}],"prevLine":" for (int i = 0; i < cnfSize; i++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"    cnf[i] = nullptr;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    count--;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[224]}],"prevLine":"   if (val == value && val != '-') {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V3511","currLine":" } else if (auto rowStrategy = dynamic_cast<strategiaRow*>(equation.branchingStrategy.get())) {","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"  this->branchingStrategy = std::make_shared<strategiaRow>(*rowStrategy);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[41]}],"prevLine":"  this->branchingStrategy = std::make_shared<strategiaColumn>(*colStrategy);","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3539","currLine":"        this->cnf[i] = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[16]}],"prevLine":"    for (int i = 0; i < cnfSize; i++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"  this->cnf[i] = equation.cnf[i]; ","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[31]}],"prevLine":" for (int i = 0; i < equation.cnfSize; i++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"  BoolInterval *interval = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[54]}],"prevLine":" for (int i = 0; i < cnfSize; i++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"  BoolInterval *interval = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[217]}],"prevLine":" for (int i = 0; i < cnfSize; i++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"    cnf[i] = nullptr;","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    count--;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[224]}],"prevLine":"   if (val == value && val != '-') {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V108","currLine":"        this->cnf[i] = cnf[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[16]}],"prevLine":"    for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"        this->cnf[i] = cnf[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: this->cnf[not a memsize-type]. Use memsize type instead.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[16]}],"prevLine":"    for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"  this->cnf[i] = equation.cnf[i]; ","falseAlarm":false,"level":2,"message":"Incorrect index type: equation.cnf[not a memsize-type]. Use memsize type instead.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[31]}],"prevLine":" for (int i = 0; i < equation.cnfSize; i++) {"}
{"code":"V108","currLine":"  this->cnf[i] = equation.cnf[i]; ","falseAlarm":false,"level":2,"message":"Incorrect index type: this->cnf[not a memsize-type]. Use memsize type instead.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[31]}],"prevLine":" for (int i = 0; i < equation.cnfSize; i++) {"}
{"code":"V108","currLine":"  BoolInterval *interval = cnf[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[54]}],"prevLine":" for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"  BoolInterval *interval = cnf[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[217]}],"prevLine":" for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"    cnf[i] = nullptr;","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","nextLine":"    count--;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[224]}],"prevLine":"   if (val == value && val != '-') {"}
{"code":"V121","currLine":"    this->cnf = new BoolInterval*[cnfSize];","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[13]}],"prevLine":"{"}
{"code":"V121","currLine":" this->cnf = new BoolInterval*[equation.cnfSize];","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[28]}],"prevLine":"{"}
{"code":"V818","currLine":"BoolEquation::BoolEquation(BoolInterval **cnf, BoolInterval *root, int cnfSize, int count, BBV mask, std::shared_ptr<BranchingStrategy> strategy)","falseAlarm":false,"level":2,"message":"It is more efficient to use an initialization list 'mask(mask)' rather than an assignment operator.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[11,22]}]}
{"code":"V2511","currLine":"    this->cnf = new BoolInterval*[cnfSize];","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[13]}],"prevLine":"{","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":" this->cnf = new BoolInterval*[equation.cnfSize];","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[28]}],"prevLine":"{","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":" this->root = new BoolInterval(equation.root->vec, equation.root->dnc);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":" this->cnfSize = equation.cnfSize;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[34]}],"sastId":"MISRA-CPP-18-4-1"}
{"code":"V688","currLine":"BoolEquation::BoolEquation(BoolInterval **cnf, BoolInterval *root, int cnfSize, int count, BBV mask, std::shared_ptr<BranchingStrategy> strategy)","falseAlarm":false,"level":3,"message":"The 'cnfSize' function argument possesses the same name as one of the class members, which can result in a confusion.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[11]}],"sastId":"CERT-DCL01-C"}
{"code":"V820","currLine":"    this->mask = mask;","falseAlarm":false,"level":3,"message":"The 'mask' variable is not used after copying. Copying can be replaced with move/swap for optimization.","nextLine":"    this->branchingStrategy = strategy;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","lines":[22]}],"prevLine":"    this->count = count;"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V2575","currLine":"class BoolEquation {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.h","lines":[9]}],"sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V3549","currLine":"class BoolEquation {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.h","lines":[9]}],"sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V690","currLine":"class BoolEquation {","falseAlarm":false,"level":2,"message":"The 'BoolEquation' class implements a copy constructor, but lacks the copy assignment operator. It is dangerous to use such a class.","nextLine":"public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.h","lines":[9]}]}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    BoolInterval **cnf;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    BoolInterval *root;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.h","lines":[11]}],"prevLine":"public:"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp"],"code":"V122","currLine":"    BoolInterval *root;","falseAlarm":false,"level":3,"message":"Memsize type is used in the struct/class.","nextLine":"    int cnfSize;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.h","lines":[12]}],"prevLine":"    BoolInterval **cnf;"}
{"code":"V2506","currLine":"bool BoolInterval::operator==(BoolInterval &ibv)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[59,62,65]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolInterval::operator!=(BoolInterval &ibv)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[68,71,74]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolInterval::isEqualComponent(BoolInterval &ibv)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[100,121,124]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"bool BoolInterval::isOrthogonal(BoolInterval &ibv)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[129,150,153]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":"char BoolInterval::getValue(int ix)","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[158,165,169,172]}],"sastId":"MISRA-CPP-6-6-5"}
{"code":"V2513","currLine":" if (vec_in && dnc_in && strlen(vec_in) == strlen(dnc_in)) {","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"  vec = BBV(vec_in);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[17]}],"prevLine":" // ,        ,   ,           (1 ).","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2513","currLine":"  size_t sz = strlen(vector);","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"  vec = BBV(sz);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[30]}],"prevLine":" if (vector) {","sastId":"MISRA-CPP-18-0-5"}
{"code":"V2516","currLine":"   } else if (vector[ix] == '1') {","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"    vec[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[38]}],"prevLine":"    dnc[ix] = 1;","sastId":"MISRA-CPP-6-4-2"}
{"code":"V2537","currLine":"void BoolInterval::setInterval(BBV &vec, BBV &dnc)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'dnc'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[54]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2537","currLine":"void BoolInterval::setInterval(BBV &vec, BBV &dnc)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'vec'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[54]}],"sastId":"MISRA-CPP-0-1-11"}
{"code":"V2563","currLine":"   if (vector[ix] == '-') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    dnc[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[36]}],"prevLine":"  while (ix < sz) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"   } else if (vector[ix] == '1') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    vec[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[38]}],"prevLine":"    dnc[ix] = 1;","sastId":"MISRA-CPP-5-0-15"}
{"code":"V3508","currLine":" if (vec_in && dnc_in && strlen(vec_in) == strlen(dnc_in)) {","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"  vec = BBV(vec_in);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[17]}],"prevLine":" // ,        ,   ,           (1 ).","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3508","currLine":"  size_t sz = strlen(vector);","falseAlarm":false,"level":1,"message":"The function with the 'strlen' name should not be used.","nextLine":"  vec = BBV(sz);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[30]}],"prevLine":" if (vector) {","sastId":"AUTOSAR-M18-0-5"}
{"code":"V3511","currLine":"   } else if (vector[ix] == '1') {","falseAlarm":false,"level":1,"message":"The 'if' ... 'else if' construct should be terminated with an 'else' statement.","nextLine":"    vec[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[38]}],"prevLine":"    dnc[ix] = 1;","sastId":"AUTOSAR-M6-4-2"}
{"code":"V3523","currLine":"void BoolInterval::setInterval(BBV &vec, BBV &dnc)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'dnc'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[54]}],"sastId":"AUTOSAR-M0-1-11"}
{"code":"V3523","currLine":"void BoolInterval::setInterval(BBV &vec, BBV &dnc)","falseAlarm":false,"level":1,"message":"Functions should not have unused parameters. Consider inspecting the parameter: 'vec'.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[54]}],"sastId":"AUTOSAR-M0-1-11"}
{"code":"V3539","currLine":"   if (vector[ix] == '-') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    dnc[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[36]}],"prevLine":"  while (ix < sz) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"   } else if (vector[ix] == '1') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"    vec[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[38]}],"prevLine":"    dnc[ix] = 1;","sastId":"AUTOSAR-M5-0-15"}
{"code":"V101","currLine":" size_t sz = vec.getSize();","falseAlarm":false,"level":2,"message":"Implicit assignment type conversion to memsize type.","nextLine":" string str(vec.getSize(), '0');","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[79]}],"prevLine":"{"}
{"code":"V104","currLine":"  while (ix < sz) {","falseAlarm":false,"level":2,"message":"Implicit conversion of 'ix' to memsize type in an arithmetic expression: ix < sz","nextLine":"   if (vector[ix] == '-') {","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[35]}]}
{"code":"V104","currLine":" for (int ix = 0; ix < sz; ix++) {","falseAlarm":false,"level":2,"message":"Implicit conversion of 'ix' to memsize type in an arithmetic expression: ix < sz","nextLine":"  str[ix] = getValue(ix);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[82]}]}
{"code":"V107","currLine":" vec = BBV(len);","falseAlarm":false,"level":2,"message":"Implicit type conversion first argument 'len' of function 'BBV' to 32-bit type.","nextLine":" dnc = BBV(len);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[10]}],"prevLine":"{"}
{"code":"V107","currLine":" dnc = BBV(len);","falseAlarm":false,"level":2,"message":"Implicit type conversion first argument 'len' of function 'BBV' to 32-bit type.","nextLine":"}","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[11]}],"prevLine":" vec = BBV(len);"}
{"code":"V107","currLine":"  vec = BBV(sz);","falseAlarm":false,"level":2,"message":"Implicit type conversion first argument 'sz' of function 'BBV' to 32-bit type.","nextLine":"  dnc = BBV(sz);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[31]}],"prevLine":"  size_t sz = strlen(vector);"}
{"code":"V107","currLine":"  dnc = BBV(sz);","falseAlarm":false,"level":2,"message":"Implicit type conversion first argument 'sz' of function 'BBV' to 32-bit type.","nextLine":"  int ix = 0;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[32]}],"prevLine":"  vec = BBV(sz);"}
{"code":"V108","currLine":"   if (vector[ix] == '-') {","falseAlarm":false,"level":2,"message":"Incorrect index type: vector[not a memsize-type]. Use memsize type instead.","nextLine":"    dnc[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[36]}],"prevLine":"  while (ix < sz) {"}
{"code":"V108","currLine":"   } else if (vector[ix] == '1') {","falseAlarm":false,"level":2,"message":"Incorrect index type: vector[not a memsize-type]. Use memsize type instead.","nextLine":"    vec[ix] = 1;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[38]}],"prevLine":"    dnc[ix] = 1;"}
{"code":"V108","currLine":"  str[ix] = getValue(ix);","falseAlarm":false,"level":2,"message":"Incorrect index type: str[not a memsize-type]. Use memsize type instead.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[83]}],"prevLine":" for (int ix = 0; ix < sz; ix++) {"}
{"code":"V818","currLine":"BoolInterval::BoolInterval(BBV &vec_in, BBV &dnc_in)","falseAlarm":false,"level":2,"message":"It is more efficient to use an initialization list 'vec(vec_in), dnc(dnc_in)' rather than an assignment operator.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[47,49,50]}]}
{"code":"V820","currLine":" BBV answer(zero);","falseAlarm":false,"level":3,"message":"The 'zero' variable is not used after copying. Copying can be replaced with move/swap for optimization.","nextLine":" tmpUV = dnc | ibv.dnc;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[106]}],"prevLine":" BBV tmpV(zero);"}
{"code":"V2009","currLine":"bool BoolInterval::operator==(BoolInterval &ibv)","falseAlarm":false,"level":3,"message":"Consider passing the 'ibv' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[59]}]}
{"code":"V2009","currLine":"bool BoolInterval::operator!=(BoolInterval &ibv)","falseAlarm":false,"level":3,"message":"Consider passing the 'ibv' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[68]}]}
{"code":"V2009","currLine":"bool BoolInterval::isEqualComponent(BoolInterval &ibv)","falseAlarm":false,"level":3,"message":"Consider passing the 'ibv' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[100]}]}
{"code":"V2009","currLine":"bool BoolInterval::isOrthogonal(BoolInterval &ibv)","falseAlarm":false,"level":3,"message":"Consider passing the 'ibv' argument as a reference to const.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","lines":[129]}]}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":"class BoolInterval","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.h","lines":[6]}],"sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":"class BoolInterval","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.h","lines":[6]}],"sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V690","currLine":"class BoolInterval","falseAlarm":false,"level":3,"message":"The 'BoolInterval' class implements the copy assignment operator, but lacks a copy constructor. It is dangerous to use such a class.","nextLine":"{","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolinterval.h","lines":[6]}]}
{"code":"V808","currLine":"            std::string strategyArg = argv[2];","falseAlarm":false,"level":1,"message":"'strategyArg' object of 'basic_string' type was created but was not utilized.","nextLine":"            ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[142]}],"prevLine":"        if (argc > 2) {"}
{"code":"V2547","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[36]}],"prevLine":"    std::string result = str;","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2547","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"    return result;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[37]}],"prevLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","sastId":"MISRA-CPP-0-1-7"}
{"code":"V2551","currLine":"    auto start_time = std::chrono::high_resolution_clock::now();","falseAlarm":false,"level":1,"message":"The 'start_time' variable should be declared in a scope that minimizes its visibility.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[159,162]}],"prevLine":"    //   ","sastId":"MISRA-CPP-3-4-1"}
{"code":"V2570","currLine":"    while (start != str.end() && std::isspace(*start)) {","falseAlarm":false,"level":1,"message":"Operands of the '&&' operator should have bool essential type.","nextLine":"        start++;  //   ,      ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[47]}],"prevLine":"    //    ","sastId":"MISRA-CPP-5-3-1"}
{"code":"V2575","currLine":"Allocator equationAllocator(sizeof(BoolEquation), 1000, NULL, \"EquationAllocator\");  //  BoolEquation","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"Allocator nodeAllocator(sizeof(NodeBoolTree), 2000, NULL, \"NodeAllocator\");          //  NodeBoolTree","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[28]}],"prevLine":"//       ","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"Allocator nodeAllocator(sizeof(NodeBoolTree), 2000, NULL, \"NodeAllocator\");          //  NodeBoolTree","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"Allocator intervalAllocator(sizeof(BoolInterval), 500, NULL, \"IntervalAllocator\");   //  BoolInterval","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[29]}],"prevLine":"Allocator equationAllocator(sizeof(BoolEquation), 1000, NULL, \"EquationAllocator\");  //  BoolEquation","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"Allocator intervalAllocator(sizeof(BoolInterval), 500, NULL, \"IntervalAllocator\");   //  BoolInterval","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"Allocator bbvAllocator(sizeof(BBV), 1000, NULL, \"BBVAllocator\");                     //  BBV","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[30]}],"prevLine":"Allocator nodeAllocator(sizeof(NodeBoolTree), 2000, NULL, \"NodeAllocator\");          //  NodeBoolTree","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"Allocator bbvAllocator(sizeof(BBV), 1000, NULL, \"BBVAllocator\");                     //  BBV","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[31]}],"prevLine":"Allocator intervalAllocator(sizeof(BoolInterval), 500, NULL, \"IntervalAllocator\");   //  BoolInterval","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"std::string trimNewlines(const std::string& str) {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    std::string result = str;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[34]}],"prevLine":"//      ","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2575","currLine":"std::string trim(const std::string& str) {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    //  ,    ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[42]}],"prevLine":"//       ","sastId":"MISRA-CPP-7-3-1"}
{"code":"V2600","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","falseAlarm":false,"level":1,"message":"The function with the 'remove' name should not be used.","nextLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[36]}],"prevLine":"    std::string result = str;","sastId":"MISRA-CPP-27-0-1"}
{"code":"V2600","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","falseAlarm":false,"level":1,"message":"The function with the 'remove' name should not be used.","nextLine":"    return result;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[37]}],"prevLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","sastId":"MISRA-CPP-27-0-1"}
{"code":"V3527","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[36]}],"prevLine":"    std::string result = str;","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3527","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","falseAlarm":false,"level":1,"message":"The return value of non-void function 'erase' should be used.","nextLine":"    return result;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[37]}],"prevLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","sastId":"AUTOSAR-A0-1-2"}
{"code":"V3530","currLine":"    auto start_time = std::chrono::high_resolution_clock::now();","falseAlarm":false,"level":1,"message":"The 'start_time' variable should be declared in a scope that minimizes its visibility.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[159,162]}],"prevLine":"    //   ","sastId":"AUTOSAR-M3-4-1"}
{"code":"V3545","currLine":"    while (start != str.end() && std::isspace(*start)) {","falseAlarm":false,"level":1,"message":"Operands of the '&&' operator should have bool essential type.","nextLine":"        start++;  //   ,      ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[47]}],"prevLine":"    //    ","sastId":"AUTOSAR-M5-3-1"}
{"code":"V3549","currLine":"Allocator equationAllocator(sizeof(BoolEquation), 1000, NULL, \"EquationAllocator\");  //  BoolEquation","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"Allocator nodeAllocator(sizeof(NodeBoolTree), 2000, NULL, \"NodeAllocator\");          //  NodeBoolTree","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[28]}],"prevLine":"//       ","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"Allocator nodeAllocator(sizeof(NodeBoolTree), 2000, NULL, \"NodeAllocator\");          //  NodeBoolTree","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"Allocator intervalAllocator(sizeof(BoolInterval), 500, NULL, \"IntervalAllocator\");   //  BoolInterval","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[29]}],"prevLine":"Allocator equationAllocator(sizeof(BoolEquation), 1000, NULL, \"EquationAllocator\");  //  BoolEquation","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"Allocator intervalAllocator(sizeof(BoolInterval), 500, NULL, \"IntervalAllocator\");   //  BoolInterval","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"Allocator bbvAllocator(sizeof(BBV), 1000, NULL, \"BBVAllocator\");                     //  BBV","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[30]}],"prevLine":"Allocator nodeAllocator(sizeof(NodeBoolTree), 2000, NULL, \"NodeAllocator\");          //  NodeBoolTree","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"Allocator bbvAllocator(sizeof(BBV), 1000, NULL, \"BBVAllocator\");                     //  BBV","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[31]}],"prevLine":"Allocator intervalAllocator(sizeof(BoolInterval), 500, NULL, \"IntervalAllocator\");   //  BoolInterval","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"std::string trimNewlines(const std::string& str) {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    std::string result = str;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[34]}],"prevLine":"//      ","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3549","currLine":"std::string trim(const std::string& str) {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":"    //  ,    ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[42]}],"prevLine":"//       ","sastId":"AUTOSAR-M7-3-1"}
{"code":"V3554","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","falseAlarm":false,"level":1,"message":"The function with the 'remove' name should not be used.","nextLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[36]}],"prevLine":"    std::string result = str;","sastId":"AUTOSAR-M27-0-1"}
{"code":"V3554","currLine":"    result.erase(std::remove(result.begin(), result.end(), '\\n'), result.end());","falseAlarm":false,"level":1,"message":"The function with the 'remove' name should not be used.","nextLine":"    return result;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[37]}],"prevLine":"    result.erase(std::remove(result.begin(), result.end(), '\\r'), result.end());","sastId":"AUTOSAR-M27-0-1"}
{"code":"V103","currLine":"        int cnfSize = full_file_list.size(); //   ,   ","falseAlarm":false,"level":2,"message":"Implicit type conversion from memsize to 32-bit type.","nextLine":"        BoolInterval **CNF = new BoolInterval*[cnfSize]; //      BoolInterval (  )","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[169]}]}
{"code":"V103","currLine":"            rangInterval = trim(full_file_list[0]).length();","falseAlarm":false,"level":2,"message":"Implicit type conversion from memsize to 32-bit type.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[174]}],"prevLine":"        if (cnfSize) {"}
{"code":"V108","currLine":"            std::string strv = trim(full_file_list[i]);","falseAlarm":false,"level":2,"message":"Incorrect index type: full_file_list[not a memsize-type]. Use memsize type instead.","nextLine":"            #ifdef USE_CUSTOM_ALLOCATOR","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[178]}],"prevLine":"        for (int i = 0; i < cnfSize; i++) { //  "}
{"code":"V108","currLine":"            CNF[i] = new BoolInterval(strv.c_str());","falseAlarm":false,"level":2,"message":"Incorrect index type: CNF[not a memsize-type]. Use memsize type instead.","nextLine":"            #endif","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[182]}],"prevLine":"            #else"}
{"code":"V108","currLine":"                                    if (!CNF[i]->isEqualComponent(*currentEquation->root)) {","falseAlarm":false,"level":2,"message":"Incorrect index type: CNF[not a memsize-type]. Use memsize type instead.","nextLine":"                                        rootIsFinded = false; //   .   .","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[270]}],"prevLine":"                                for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"            delete CNF[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: CNF[not a memsize-type]. Use memsize type instead.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[410]}],"prevLine":"        for (int i = 0; i < cnfSize; i++) {"}
{"code":"V121","currLine":"        BoolInterval **CNF = new BoolInterval*[cnfSize]; //      BoolInterval (  )","falseAlarm":false,"level":2,"message":"Implicit conversion of the type of 'new' operator's argument to size_t type.","nextLine":"        int rangInterval = -1; //  ,       (  -1,  )","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[170]}],"prevLine":"        int cnfSize = full_file_list.size(); //   ,   "}
{"code":"V803","currLine":"        start++;  //   ,      ","falseAlarm":false,"level":2,"message":"Decreased performance. In case 'start' is iterator it's more effective to use prefix form of increment. Replace iterator++ with ++iterator.","nextLine":"    }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[48]}],"prevLine":"    while (start != str.end() && std::isspace(*start)) {"}
{"code":"V803","currLine":"        end--;  //   ,        ","falseAlarm":false,"level":2,"message":"Decreased performance. In case 'end' is iterator it's more effective to use prefix form of decrement. Replace iterator-- with --iterator.","nextLine":"    } while (std::distance(start, end) > 0 && std::isspace(*end));  // ,        ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[56]}],"prevLine":"    do {"}
{"code":"V823","currLine":"            full_file_list.push_back(trimNewlines(line));","falseAlarm":false,"level":2,"message":"Decreased performance. Object may be created in-place in the 'full_file_list' container. Consider replacing methods: 'push_back' -> 'emplace_back'.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[165]}],"prevLine":"        while (std::getline(file, line)) {"}
{"code":"V2511","currLine":"        BoolInterval **CNF = new BoolInterval*[cnfSize]; //      BoolInterval (  )","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        int rangInterval = -1; //  ,       (  -1,  )","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[170]}],"prevLine":"        int cnfSize = full_file_list.size(); //   ,   ","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            CNF[i] = new BoolInterval(strv.c_str());","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"            #endif","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[182]}],"prevLine":"            #else","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        BoolInterval *root = new BoolInterval(vec, dnc);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        #endif","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[211]}],"prevLine":"        //    ","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        boolequation = new BoolEquation(CNF, root, cnfSize, cnfSize, vec, strategy);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        startNode = new NodeBoolTree(boolequation);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[234]}],"prevLine":"        //   new","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        startNode = new NodeBoolTree(boolequation);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"        #endif","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[235]}],"prevLine":"        boolequation = new BoolEquation(CNF, root, cnfSize, cnfSize, vec, strategy);","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"                            Equation0 = new BoolEquation(*currentEquation);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"                            Equation1 = new BoolEquation(*currentEquation);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[300]}],"prevLine":"                            //   new","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"                            Equation1 = new BoolEquation(*currentEquation);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"                            ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[301]}],"prevLine":"                            Equation0 = new BoolEquation(*currentEquation);","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"                            Node0 = new NodeBoolTree(Equation0);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"                            Node1 = new NodeBoolTree(Equation1);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[306]}],"prevLine":"                            ","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"                            Node1 = new NodeBoolTree(Equation1);","falseAlarm":false,"level":2,"message":"The 'new' operator should not be used.","nextLine":"                            #endif","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[307]}],"prevLine":"                            Node0 = new NodeBoolTree(Equation0);","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            delete node->eq;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"            delete node;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[404]}],"prevLine":"            BoolTree.pop();","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            delete node;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[405]}],"prevLine":"            delete node->eq;","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"            delete CNF[i];","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"        }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[410]}],"prevLine":"        for (int i = 0; i < cnfSize; i++) {","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        delete root;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","nextLine":"        #endif","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[412]}],"prevLine":"        }","sastId":"MISRA-CPP-18-4-1"}
{"code":"V2511","currLine":"        delete[] CNF;","falseAlarm":false,"level":2,"message":"The 'delete' operator should not be used.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[416]}],"prevLine":"        //      ","sastId":"MISRA-CPP-18-4-1"}
{"code":"V821","currLine":"    auto start_time = std::chrono::high_resolution_clock::now();","falseAlarm":false,"level":3,"message":"Decreased performance. The 'start_time' variable can be constructed in a lower level scope.","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","lines":[159,162]}],"prevLine":"    //   ","sastId":"CERT-DCL19-C"}
{"code":"V2506","currLine":" int strategiaColumn::chooseBranchingIndex(BoolInterval** cnf, int cnfSize, BBV& mask) const {","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"     std::vector<int> indexes;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[10,24,54]}],"prevLine":" //     ","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2506","currLine":" int strategiaRow::chooseBranchingIndex(BoolInterval** cnf, int cnfSize, BBV& mask) const {","falseAlarm":false,"level":1,"message":"A function should have a single point of exit at the end.","nextLine":"     std::vector<int> nonEmptyRows;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[58,80,100,105]}],"prevLine":" //     ","sastId":"MISRA-CPP-6-6-5"}
{"code":"V2563","currLine":"         BoolInterval* interval = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[29]}],"prevLine":"     for (int i = 0; i < cnfSize; i++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"         if (cnf[i] != nullptr) {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"             nonEmptyRows.push_back(i);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[64]}],"prevLine":"     for (int i = 0; i < cnfSize; i++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"                 if (mask[j] == 0 && cnf[i]->getValue(j) != '-') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                     weight++;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[70]}],"prevLine":"             for (int j = 0; j < mask.getSize(); j++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V2563","currLine":"         if (mask[j] == 0 && cnf[rowIndex]->getValue(j) != '-') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"             return j;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[99]}],"prevLine":"     for (int j = 0; j < mask.getSize(); j++) {","sastId":"MISRA-CPP-5-0-15"}
{"code":"V3539","currLine":"         BoolInterval* interval = cnf[i];","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[29]}],"prevLine":"     for (int i = 0; i < cnfSize; i++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"         if (cnf[i] != nullptr) {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"             nonEmptyRows.push_back(i);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[64]}],"prevLine":"     for (int i = 0; i < cnfSize; i++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"                 if (mask[j] == 0 && cnf[i]->getValue(j) != '-') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"                     weight++;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[70]}],"prevLine":"             for (int j = 0; j < mask.getSize(); j++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V3539","currLine":"         if (mask[j] == 0 && cnf[rowIndex]->getValue(j) != '-') {","falseAlarm":false,"level":1,"message":"Array indexing should be the only form of pointer arithmetic and it should be applied only to objects defined as an array type.","nextLine":"             return j;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[99]}],"prevLine":"     for (int j = 0; j < mask.getSize(); j++) {","sastId":"AUTOSAR-M5-0-15"}
{"code":"V103","currLine":"             minIndex = i;","falseAlarm":false,"level":2,"message":"Implicit type conversion from memsize to 32-bit type.","nextLine":"         }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[90]}],"prevLine":"             minWeight = rowWeights[i];"}
{"code":"V106","currLine":"     return indexes.at(minElementIndex);","falseAlarm":false,"level":2,"message":"Implicit type conversion first argument 'minElementIndex' of function 'at' to memsize type.","nextLine":" }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[54]}],"prevLine":"     int minElementIndex = std::min_element(values.begin(), values.end()) - values.begin();"}
{"code":"V108","currLine":"         BoolInterval* interval = cnf[i];","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","nextLine":" ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[29]}],"prevLine":"     for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"         if (cnf[i] != nullptr) {","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","nextLine":"             nonEmptyRows.push_back(i);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[64]}],"prevLine":"     for (int i = 0; i < cnfSize; i++) {"}
{"code":"V108","currLine":"                 if (mask[j] == 0 && cnf[i]->getValue(j) != '-') {","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","nextLine":"                     weight++;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[70]}],"prevLine":"             for (int j = 0; j < mask.getSize(); j++) {"}
{"code":"V108","currLine":"     int rowIndex = nonEmptyRows[minIndex];","falseAlarm":false,"level":2,"message":"Incorrect index type: nonEmptyRows[not a memsize-type]. Use memsize type instead.","nextLine":"     ","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[95]}],"prevLine":"     //       ()  "}
{"code":"V108","currLine":"         if (mask[j] == 0 && cnf[rowIndex]->getValue(j) != '-') {","falseAlarm":false,"level":2,"message":"Incorrect index type: cnf[not a memsize-type]. Use memsize type instead.","nextLine":"             return j;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[99]}],"prevLine":"     for (int j = 0; j < mask.getSize(); j++) {"}
{"code":"V127","currLine":"                         values.at(k)++;","falseAlarm":false,"level":2,"message":"An overflow of the 32-bit 'values.at(k)' variable is possible inside a long cycle which utilizes a memsize-type loop counter.","nextLine":"                     }","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[45,43]}],"prevLine":"                     if (interval->getValue(indexes.at(k)) == '-') {"}
{"code":"V831","currLine":"                     if (interval->getValue(indexes.at(k)) == '-') {","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the call to the 'at()' method with the 'operator[]'.","nextLine":"                         values.push_back(1);","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[34]}],"prevLine":"                 for (size_t k = 0; k < indexes.size(); k++) {"}
{"code":"V831","currLine":"                     if (interval->getValue(indexes.at(k)) == '-') {","falseAlarm":false,"level":2,"message":"Decreased performance. Consider replacing the call to the 'at()' method with the 'operator[]'.","nextLine":"                         values.at(k)++;","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp","lines":[44]}],"prevLine":"                 for (size_t k = 0; k < indexes.size(); k++) {"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":" class BranchingStrategy {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":" public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.h","lines":[8]}],"prevLine":" //    ","sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":" class strategiaColumn : public BranchingStrategy {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":" public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.h","lines":[17]}],"prevLine":" //    ","sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V2575","currLine":" class strategiaRow : public BranchingStrategy {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":" public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.h","lines":[24]}],"prevLine":" //    ","sastId":"MISRA-CPP-7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":" class BranchingStrategy {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":" public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.h","lines":[8]}],"prevLine":" //    ","sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":" class strategiaColumn : public BranchingStrategy {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":" public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.h","lines":[17]}],"prevLine":" //    ","sastId":"AUTOSAR-M7-3-1"}
{"analyzedSourceFiles":["C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\boolequation.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\main.cpp","C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.cpp"],"code":"V3549","currLine":" class strategiaRow : public BranchingStrategy {","falseAlarm":false,"level":1,"message":"The global namespace should only contain 'main', namespace declarations and extern 'C' declaration.","nextLine":" public:","positions":[{"file":"C:\\Users\\Vova\\Desktop\\labs\\UserProjectSAT\\src\\strategia.h","lines":[24]}],"prevLine":" //    ","sastId":"AUTOSAR-M7-3-1"}
